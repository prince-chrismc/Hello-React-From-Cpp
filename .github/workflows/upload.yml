name: Upload CD

on:
  push:
    branches:
      - master # tagged latest
    tags:
      - v* # semver release
  pull_request: # runs tests
  workflow_dispatch: {}

env:
  NAME: user-management
  BUILD_VERSION: 1.0.0-commit.${{ github.run_number }}
  CONAN_REMOTE: user-management-conan
  CONAN_REMOTE_URL: https://princechrismc.jfrog.io/artifactory/api/conan/user-management-conan
  DIST_URL: https://princechrismc.jfrog.io/artifactory/user-management-dist
  NPM_REGISTRY_URL: https://princechrismc.jfrog.io/artifactory/api/npm/user-management-npm/ 
  DOCKER_REGISTRY: princechrismc.jfrog.io/user-management-docker

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.build-version }} 
    steps:
    - uses: actions/checkout@v2
    - id: version
      uses: ./.github/actions/determine-version
      with:
        github-ref: ${{ github.ref }}
        unique-alt-id: ${{ github.sha }}

  build-image:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      name: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine:${{ needs.setup.outputs.build-version }}
    steps:
    - uses: actions/checkout@v2
    - uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true
    - uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - run: docker build . --file backend/Dockerfile.build --tag ${{ env.name }}
    - run: docker push ${{ env.name }}

  calc-deps:
    needs: [setup, build-image]
    runs-on: ubuntu-latest
    container: 
      image: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine:${{ needs.setup.outputs.build-version }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      empty_matrix: ${{ steps.check-matrix.outputs.empty_matrix }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
    - uses: ./.github/actions/setup-conan
    - name: calc
      run: |
        conan profile update settings.compiler.musl=1.2 default

        cd backend
        conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
        conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc
        
        conan lock create conanfile.py --version $BUILD_VERSION --lockfile=conan.lock --lockfile-out=locks/conan.lock -s build_type=Release        
        conan lock build-order locks/conan.lock --json=build_order.json
    - id: set-matrix
      name: output
      run: |
        echo $(cat backend/build_order.json)
        cd backend
        python3 build-order-to-matrix.py
        MATRIX=$(cat matrix.json)
        echo "${MATRIX}"
        echo "::set-output name=matrix::${MATRIX}"
    - id: check-matrix
      name: Check matrix      
      run: |
        if [[ ${{ steps.set-matrix.outputs.matrix }} == *"[]"* ]]; then
          echo "::set-output name=empty_matrix::true"
        else
          echo "::set-output name=empty_matrix::false"        
        fi
  
  list-deps:
    needs: [setup, calc-deps]
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ needs.calc-deps.outputs.empty_matrix }}"
      - run: echo "${{ needs.calc-deps.outputs.matrix }}"
      - run: echo "${{ fromJson(needs.calc-deps.outputs.matrix) }}"

  build-deps:
    needs: [setup, calc-deps]
    runs-on: ubuntu-latest
    container: 
      image: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine:${{ needs.setup.outputs.build-version }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
    strategy:
      matrix: ${{ fromJson(needs.calc-deps.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      if: ${{ matrix.reference != 'null' }}
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
    - uses: ./.github/actions/setup-conan
      if: ${{ matrix.reference != 'null' }}
    - name: build
      if: ${{ matrix.reference != 'null' }}
      run: |
        conan profile update settings.compiler.musl=1.2 default
        
        conan lock create --reference=${{ matrix.reference }}
        conan install ${{ matrix.reference }} -l conan.lock -b missing
    - name: upload
      if: ${{ matrix.reference != 'null' }}
      run: |
        conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
        conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc
                
        conan upload ${{ matrix.reference }} -r $CONAN_REMOTE --all
    - run: exit 0
  
  alpine-backend:
    needs: [setup, build-deps]
    runs-on: ubuntu-latest
    container: 
      image: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine:${{ needs.setup.outputs.build-version }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
    - uses: ./.github/actions/setup-conan
    - name: build
      run: |
        conan profile update settings.compiler.musl=1.2 default
        
        cd backend
        conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
        conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc
        
        conan lock create conanfile.py --version $BUILD_VERSION --lockfile=conan.lock --lockfile-out=locks/conan.lock -s build_type=Release
        
        conan create conanfile.py $BUILD_VERSION@ --lockfile=locks/conan.lock --build missing
    - name: upload
      run: conan upload $NAME/$BUILD_VERSION@ -r $CONAN_REMOTE --all
  
  install-image:
    needs: [setup, alpine-backend]
    runs-on: ubuntu-latest
    container: 
      image: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine:${{ needs.setup.outputs.build-version }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
    env:
      name: docker.pkg.github.com/${{ github.repository }}/user-management-backend:${{ needs.setup.outputs.build-version }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
    - uses: ./.github/actions/setup-conan
    - name: download
      run: |
        conan profile update settings.compiler.musl=1.2 default
        
        conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
        conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc
        
        cd backend
        conan install $NAME/$BUILD_VERSION@
    - name: build
      run: |
        # https://stackoverflow.com/a/57868193/8480874
        apk add --update docker openrc
        rc-update add docker boot
        
        cd backend
        docker build . --file Dockerfile --tag ${{ env.name }}
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
        docker push ${{ env.name }}
    - if: github.event_name == 'push'
      name: upload
      run: |
        echo "${{ secrets.JFROG_RTFACT_PASSWORD }}" | docker login princechrismc.jfrog.io -u prince-chrismc --password-stdin
        docker tag ${{ env.name }} $DOCKER_REGISTRY/$NAME-backend:$BUILD_VERSION
        docker push $DOCKER_REGISTRY/$NAME-backend:$BUILD_VERSION

  backend:
    strategy:
      fail-fast: true
      matrix:
        build-type: [Release, Debug]
        logging: [syslog, console]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: ./.github/actions/setup-conan
    - uses: lukka/get-cmake@latest
    - name: build and upload
      run: |
        cd backend
        
        conan lock create conanfile.py --version $BUILD_VERSION --lockfile=conan.lock --lockfile-out=locks/conan.lock -s build_type=${{ matrix.build-type }} -s compiler.libcxx=libstdc++11 -o user-management:logging=${{ matrix.logging }}
        conan create conanfile.py $BUILD_VERSION@ --lockfile=locks/conan.lock
    - if: github.event_name == 'push' || matrix.build-type == 'Release'
      run: |
        conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
        conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc
        
        conan upload $NAME/$BUILD_VERSION@ -r $CONAN_REMOTE --all

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2.1.4
      with:
        node-version: 14.x # Current LTS
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
    - run: |
        cd web-app/
        yarn install
        yarn build --env.API_URL=https://ec2-18-222-250-141.us-east-2.compute.amazonaws.com/
        GZIP=-9 tar -zcf $NAME-static-fe-$BUILD_VERSION.tar.gz dist/
        curl -uprince-chrismc:${{ secrets.JFROG_RTFACT_PASSWORD }} -T $NAME-static-fe-$BUILD_VERSION.tar.gz "$DIST_URL/$NAME-static-fe-$BUILD_VERSION.tar.gz"

  frontend-pack:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2.1.4
      with:
        node-version: 14.x # Current LTS
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
    - run: |
        cd web-app/
        sed -i "s/1.0.0-dev.0/$BUILD_VERSION/1" package.json
        npm config set registry $NPM_REGISTRY_URL
        echo '_auth = ${{ secrets.JFROG_RTFACT_NPM_AUTH }}' > ~/.npmrc
        echo 'email = prince.chrismc@gmail.com' >> ~/.npmrc
        echo 'always-auth = true' >> ~/.npmrc
        npm pack
        npm publish --registry $NPM_REGISTRY_URL $NAME-$BUILD_VERSION.tgz

  test:
    needs: [setup, install-image, frontend]
    runs-on: ubuntu-latest    
    env:
      input-name: docker.pkg.github.com/${{ github.repository }}/user-management-backend:${{ needs.setup.outputs.build-version }}
      output-name: docker.pkg.github.com/${{ github.repository }}/user-management:${{ needs.setup.outputs.build-version }}
    steps:
    - uses: actions/checkout@v2
    - uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: download
      run: |
        docker pull ${{ env.input-name }}
        docker tag ${{ env.input-name }} $NAME-backend:latest

        curl -L -uprince-chrismc:${{ secrets.JFROG_RTFACT_PASSWORD }} -O "$DIST_URL/$NAME-static-fe-$BUILD_VERSION.tar.gz"
        mkdir -p bin
        mv $NAME-static-fe-$BUILD_VERSION.tar.gz bin/web-app.tar.gz
    - name: build
      run: docker build . --file Dockerfile.alt --tag test-image --tag ${{ env.output-name }} --tag $DOCKER_REGISTRY/$NAME:$BUILD_VERSION
    - name: run
      run: |
        docker run --name test -p 8443:8443 --rm -d test-image
        docker ps | grep test
    - name: test
      run: |
        curl -s -k --key backend/certs/key.pem --cert backend/certs/server.pem -o output.log --url https://localhost:8443/index.html
        cat output.log | grep -q "<title>User Management</title>"
    - name: stop
      run: docker kill test
    - name: push
      run: docker push ${{ env.output-name }}
    - if: github.event_name == 'push'
      uses: docker/login-action@v1
      with:
        registry: princechrismc.jfrog.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.JFROG_RTFACT_PASSWORD }}
    - name: upload
      if: github.event_name == 'push'
      run: docker push $DOCKER_REGISTRY/$NAME:$BUILD_VERSION

  push:
    needs: [setup, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - uses: docker/login-action@v1
        with:
          registry: princechrismc.jfrog.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.JFROG_RTFACT_PASSWORD }}
      - name: push
        run: |
          docker pull $DOCKER_REGISTRY/$NAME:$BUILD_VERSION
          docker tag $DOCKER_REGISTRY/$NAME:$BUILD_VERSION $DOCKER_REGISTRY/$NAME:${{ needs.setup.outputs.build-version }}
          docker push $DOCKER_REGISTRY/$NAME:${{ needs.setup.outputs.build-version }}
