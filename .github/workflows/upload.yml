name: Upload CD

on:
  push:
    branches:
      - master # tagged latest
      - reuse-build-image
    tags:
      - v* # semver release
  pull_request: # runs tests
  workflow_dispatch: {}

env:
  NAME: user-management
  BUILD_VERSION: 1.0.0-commit.${{ github.run_number }}
  CONAN_REMOTE: user-management-conan
  CONAN_REMOTE_URL: https://princechrismc.jfrog.io/artifactory/api/conan/user-management-conan
  DIST_URL: https://princechrismc.jfrog.io/artifactory/user-management-dist
  NPM_REGISTRY_URL: https://princechrismc.jfrog.io/artifactory/api/npm/user-management-npm/ 
  DOCKER_REGISTRY: princechrismc.jfrog.io/user-management-docker

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.build-version }} 
    steps:
    - uses: actions/checkout@v2
    - id: version
      uses: ./.github/actions/determine-version
      with:
        github-ref: ${{ github.ref }}
        unique-alt-id: ${{ github.sha }}

  build-image:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    env:
      name: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine
    steps:
    - uses: actions/checkout@v2
    - id: version
      run: echo "::set-output name=version::$(echo ${{ hashFiles('backend/Dockerfile.build') }})"        
    - uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - if: check
      name: check existence
      run: |
        docker pull ${{ env.name }}:${{ steps.version.outputs.version }} > /dev/null && echo "::set-output name=exists::$(echo true)" || echo "::set-output name=exists::$(echo false)"
    - if: steps.check.outputs.exists == "false"
      run: docker build . --file backend/Dockerfile.build --tag ${{ env.name }}:${{ steps.version.outputs.version }}
    - if: steps.check.outputs.exists == "false"
      run: docker push ${{ env.name }}:${{ steps.version.outputs.version }}

  calc-deps:
    needs: [build-image]
    runs-on: ubuntu-latest
    container: 
      image: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine::${{ needs.build-image.outputs.version }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      empty_matrix: ${{ steps.check-matrix.outputs.empty_matrix }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
    - uses: ./.github/actions/setup-conan
    - name: calc
      run: |
        conan profile update settings.compiler.musl=1.2 default

        cd backend
        conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
        conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc
        
        conan lock create conanfile.py --version $BUILD_VERSION --lockfile=conan.lock --lockfile-out=locks/conan.lock -s build_type=Release        
        conan lock build-order locks/conan.lock --json=build_order.json
    - uses: actions/upload-artifact@v2
      with:
        name: conan-lockfile
        path: backend/locks/conan.lock
    - id: set-matrix
      name: output
      run: |
        echo $(cat backend/build_order.json)
        cd backend
        python3 build-order-to-matrix.py
        MATRIX=$(cat matrix.json)
        echo "${MATRIX}"
        echo "::set-output name=matrix::${MATRIX}"
    - id: check-matrix
      name: Check matrix      
      run: |
        if [[ ${{ steps.set-matrix.outputs.matrix }} == *"[]"* ]]; then
          echo "::set-output name=empty_matrix::true"
        else
          echo "::set-output name=empty_matrix::false"        
        fi
  
  list-deps:
    needs: [setup, calc-deps]
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ needs.calc-deps.outputs.empty_matrix }}"
      - run: echo "${{ needs.calc-deps.outputs.matrix }}"
      - run: echo "${{ fromJson(needs.calc-deps.outputs.matrix) }}"
      - uses: actions/download-artifact@v2
        with:
          name: conan-lockfile
      - run: ls -R

  build-deps:
    needs: [setup, calc-deps]
    runs-on: ubuntu-latest
    container: 
      image: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine:${{ needs.setup.outputs.build-version }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
    strategy:
      matrix: ${{ fromJson(needs.calc-deps.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        if: ${{ matrix.reference != 'null' }}
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
      - uses: ./.github/actions/setup-conan
        if: ${{ matrix.reference != 'null' }}
      - name: download
        if: ${{ matrix.reference != 'null' }}
        uses: actions/download-artifact@v2
        with:
          name: conan-lockfile
      - name: build
        if: ${{ matrix.reference != 'null' }}
        run: |
          conan profile update settings.compiler.musl=1.2 default
          
          conan install ${{ matrix.reference }} -l conan.lock -b missing
      - name: upload
        if: ${{ matrix.reference != 'null' }}
        run: |
          conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
          conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc

          conan upload ${{ matrix.reference }} -r $CONAN_REMOTE --all
      - run: exit 0
  
  alpine-backend:
    needs: [setup, build-deps]
    runs-on: ubuntu-latest
    container: 
      image: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine:${{ needs.setup.outputs.build-version }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
      - uses: actions/download-artifact@v2
        with:
          name: conan-lockfile
      - uses: ./.github/actions/setup-conan
      - name: setup
        run: |
          conan profile update settings.compiler.musl=1.2 default

          conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
          conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc
      - name: build
        run: conan create backend/conanfile.py $BUILD_VERSION@ --lockfile conan.lock
      - name: upload
        run: conan upload "*" --all -r $CONAN_REMOTE -c
  
  backend-image:
    needs: [setup, alpine-backend]
    runs-on: ubuntu-latest
    container: 
      image: docker.pkg.github.com/${{ github.repository }}/backend-build-alpine:${{ needs.setup.outputs.build-version }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
    env:
      name: docker.pkg.github.com/${{ github.repository }}/user-management-backend:${{ needs.setup.outputs.build-version }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.conan/data
          key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
      - uses: actions/download-artifact@v2
        with:
          name: conan-lockfile
      - uses: ./.github/actions/setup-conan
      - name: download
        run: |
          conan profile update settings.compiler.musl=1.2 default

          conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
          conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc

          conan install $NAME/$BUILD_VERSION@ -r $CONAN_REMOTE -l conan.lock -if backend
      - name: build
        run: |
          # https://stackoverflow.com/a/57868193/8480874
          apk add --update docker openrc
          rc-update add docker boot

          docker build backend --file backend/Dockerfile --tag ${{ env.name }}
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          docker push ${{ env.name }}
      - if: github.event_name == 'push'
        name: upload
        run: |
          echo "${{ secrets.JFROG_RTFACT_PASSWORD }}" | docker login princechrismc.jfrog.io -u prince-chrismc --password-stdin
          docker tag ${{ env.name }} $DOCKER_REGISTRY/$NAME-backend:$BUILD_VERSION
          docker push $DOCKER_REGISTRY/$NAME-backend:$BUILD_VERSION

  backend:
    strategy:
      fail-fast: true
      matrix:
        build-type: [Release]
        logging: [syslog, console]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: ./.github/actions/setup-conan
    - uses: lukka/get-cmake@latest
    - name: build and upload
      run: |
        cd backend
        
        conan lock create conanfile.py --version $BUILD_VERSION --lockfile=conan.lock --lockfile-out=locks/conan.lock -s build_type=${{ matrix.build-type }} -s compiler.libcxx=libstdc++11 -o user-management:logging=${{ matrix.logging }}
        conan create conanfile.py $BUILD_VERSION@ --lockfile=locks/conan.lock
    - if: github.event_name == 'push' || matrix.build-type == 'Release'
      run: |
        conan remote add $CONAN_REMOTE $CONAN_REMOTE_URL
        conan user -p ${{ secrets.JFROG_RTFACT_PASSWORD }} -r $CONAN_REMOTE prince-chrismc
        
        conan upload $NAME/$BUILD_VERSION@ -r $CONAN_REMOTE --all

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2.1.4
      with:
        node-version: 14.x # Current LTS
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
    - run: |
        cd web-app/
        yarn install
        yarn build --env.API_URL=https://ec2-18-222-250-141.us-east-2.compute.amazonaws.com
        GZIP=-9 tar -zcf $NAME-static-fe-$BUILD_VERSION.tar.gz dist/
        curl -uprince-chrismc:${{ secrets.JFROG_RTFACT_PASSWORD }} -T $NAME-static-fe-$BUILD_VERSION.tar.gz "$DIST_URL/$NAME-static-fe-$BUILD_VERSION.tar.gz"
        
  frontend-image:
    needs: [setup, frontend]
    runs-on: ubuntu-latest
    env:
      name: docker.pkg.github.com/${{ github.repository }}/user-management-frontend:${{ needs.setup.outputs.build-version }}
    steps:
    - uses: actions/checkout@v2
    - uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: download
      run: |
        curl -L -uprince-chrismc:${{ secrets.JFROG_RTFACT_PASSWORD }} -O "$DIST_URL/$NAME-static-fe-$BUILD_VERSION.tar.gz"
        mkdir -p /tmp/um
        tar -C /tmp/um -zxvf $NAME-static-fe-$BUILD_VERSION.tar.gz
    - name: build
      run: |
        docker build /tmp/um --file web-app/Dockerfile --tag ${{ env.name }}
        docker push ${{ env.name }}
    - if: github.event_name == 'push'
      uses: docker/login-action@v1
      with:
        registry: princechrismc.jfrog.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.JFROG_RTFACT_PASSWORD }}
    - if: github.event_name == 'push'
      name: upload
      run: |
        echo "${{ secrets.JFROG_RTFACT_PASSWORD }}" | docker login princechrismc.jfrog.io -u prince-chrismc --password-stdin
        docker tag ${{ env.name }} $DOCKER_REGISTRY/$NAME-frontend:$BUILD_VERSION
        docker push $DOCKER_REGISTRY/$NAME-frontend:$BUILD_VERSION

  frontend-pack:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2.1.4
      with:
        node-version: 14.x # Current LTS
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
    - run: |
        cd web-app/
        sed -i "s/1.0.0-dev.1/$BUILD_VERSION/1" package.json
        npm config set registry $NPM_REGISTRY_URL
        echo '_auth = ${{ secrets.JFROG_RTFACT_NPM_AUTH }}' > ~/.npmrc
        echo 'email = prince.chrismc@gmail.com' >> ~/.npmrc
        echo 'always-auth = true' >> ~/.npmrc
        npm pack
        npm publish --registry $NPM_REGISTRY_URL $NAME-frontend-$BUILD_VERSION.tgz

  test:
    needs: [setup, backend-image, frontend-image]
    runs-on: ubuntu-latest    
    env:
      backend-image: docker.pkg.github.com/${{ github.repository }}/user-management-backend:${{ needs.setup.outputs.build-version }}
      frontend-image: docker.pkg.github.com/${{ github.repository }}/user-management-frontend:${{ needs.setup.outputs.build-version }}
      um-image: docker.pkg.github.com/${{ github.repository }}/user-management:${{ needs.setup.outputs.build-version }}
    steps:
    - uses: actions/checkout@v2
    - uses: docker/login-action@v1
      with:
        registry: docker.pkg.github.com
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: download
      run: |
        docker pull ${{ env.backend-image }}
        docker tag ${{ env.backend-image }} $NAME-backend:latest
        
        docker pull ${{ env.frontend-image }}
        docker tag ${{ env.frontend-image }} $NAME-frontend:latest
    - run: docker build . --file Dockerfile.alt --tag test-image --tag ${{ env.um-image }} --tag $DOCKER_REGISTRY/$NAME:$BUILD_VERSION
    - run: docker run --name test -p 8443:8443 --rm -d test-image
    - name: test HTTPS
      run: |
        curl -s -k --key backend/certs/key.pem --cert backend/certs/server.pem -o output.log --url https://localhost:8443/index.html
        cat output.log | grep -q "<title>User Management</title>"
    - run: docker kill test
    - run: docker run --name test -p 8080:8080 --rm -d test-image dist -a "0.0.0.0" -p 8080 -n 4
    - name: test HTTP
      run: |
        curl -s -o output.log --url http://localhost:8080/index.html
        cat output.log | grep -q "<title>User Management</title>"
    - run: docker kill test
    - run: docker push ${{ env.um-image }}
    - uses: docker/login-action@v1
      with:
        registry: princechrismc.jfrog.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.JFROG_RTFACT_PASSWORD }}
    - name: upload
      run: docker push $DOCKER_REGISTRY/$NAME:$BUILD_VERSION

  upload:
    needs: [setup, test]
    strategy:
      matrix:
        image: ['user-management', 'user-management-backend' ]
      fail-fast: true
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - uses: docker/login-action@v1
        with:
          registry: princechrismc.jfrog.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.JFROG_RTFACT_PASSWORD }}
      - name: push
        run: |
          docker pull $DOCKER_REGISTRY/${{ matrix.image }}:$BUILD_VERSION
          docker tag $DOCKER_REGISTRY/${{ matrix.image }}:$BUILD_VERSION $DOCKER_REGISTRY/${{ matrix.image }}:${{ needs.setup.outputs.build-version }}
          docker push $DOCKER_REGISTRY/${{ matrix.image }}:${{ needs.setup.outputs.build-version }}

  deploy:
    needs: [setup, upload]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      - uses: pulumi/action-install-pulumi-cli@v1.0.1
      - uses: pulumi/actions@v1.2.0
        with:
          command: up
        env: 
          PULUMI_ROOT: .infra/
          PULUMI_STACK_NAME: dev
      - name: report
        run: |
          cd .infra/
          pulumi stack select dev
          jq -nc "{\"body\": \":rocket: automatically deployed to http://$(pulumi stack output url)\"}" | \
          curl -sL  -X POST -d @- \
            -H "Content-Type: application/json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments"
