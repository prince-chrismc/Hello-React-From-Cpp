name: Package CD

on:
  push:
    branches:
      - master # tagged latest
    tags:
      - v* # semver release
  pull_request: # runs tests

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      build-version: ${{ steps.version.outputs.build-version }} 
    steps:
    - uses: actions/checkout@v2
    - id: version
      uses: ./.github/actions/determine-version
      with:
        github-ref: ${{ github.ref }}
        unique-alt-id: ${{ github.sha }}

  ubuntu-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/.conan/data
        key: ${{ runner.os }}-${{ hashFiles('**/conan.lock') }}
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - uses: ./.github/actions/setup-conan
    - uses: lukka/get-cmake@latest
    - run: |
        mkdir backend/build
        cd backend/build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build .
    - uses: actions/upload-artifact@v2
      with:
         name: user_database_app
         path: backend/build/src/user_database_app

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 14.x # Current LTS
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
    - run: |
        cd web-app/
        yarn install
        yarn build
        GZIP=-9 tar -zcf web-app.tar.gz dist/
    - uses: actions/upload-artifact@v2
      with:
        name: web-app.tar.gz
        path: web-app/web-app.tar.gz

  test:
    needs: [ubuntu-backend, frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        id: download
        with:
          path: build/
      - name: Run tests
        run: |
          docker build . --file Dockerfile --tag test-image
          docker run --name test -p 8443:8443 --rm -d test-image
          docker ps | grep test
          curl -s -k --key backend/certs/key.pem --cert backend/certs/server.pem -o output.log --url https://localhost:8443/index.html
          cat output.log | grep -q "<title>User Management</title>"
          docker kill test

  push:
    needs: [setup, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    env:
      name: docker.pkg.github.com/${{ github.repository }}/user-management:${{ needs.setup.outputs.build-version }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        id: download
        with:
          path: build/
      - name: Build image
        run: docker build . --file Dockerfile --tag ${{ env.name }}
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: docker push ${{ env.name }}
