openapi: "3.0.0"
info:
  title: User Management API
  version: "1"
  description: >-
    A Simple API for creating, editing, and deleting
    users. The goal here is to offer minimal flexability
    that is sufficient for demonstrating a backend server
    or database integration.

servers:
  - url: "{server}/v1"
    variables:
      server:
        default: https://api.example.com

tags:
  - name: Search
    description: Searching database of users
  - name: Edit
    description: Edit user's entry in database

components:
  parameters:
    version:
      name: version
      in: path
      required: true
      description: Known API version
      schema:
        type: string
      example: "v1.0"
    id:
      name: id
      in: path
      required: true
      description: ID of the resoective user to display
      schema:
        type: integer
      example: 15
  schemas:
    User:
      $ref: "./schema/user.json"
    Users:
      $ref: "./schema/users.json"
    Add:
      $ref: "./schema/add.json"
    Edit:
      $ref: "./schema/edit.json"
    Error:
      $ref: "./schema/error.json"

paths:
  /users:
    parameters:
      - $ref: "#/components/parameters/version"
    get:
      tags:
        - Search
      summary: List of users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
              example:
                [
                  {
                    "id": 234,
                    "name": "John Doe",
                    "email": "john@example.com",
                  },
                  { "id": 89, "name": "Jane Doe", "email": "jane@example.com" },
                ]
    put:
      tags:
        - Edit
      summary: Create a new user
      requestBody:
        description: add a new user with given information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Add"
            example: { "name": "John Doe", "email": "john@example.com" }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                { "id": 234, "name": "John Doe", "email": "john@example.com" }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example: { "error": "malformed JSON" }
  /users/{id}:
    parameters:
      - $ref: "#/components/parameters/version"
      - $ref: "#/components/parameters/id"
    get:
      tags:
        - Search
      summary: Display user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                { "id": 234, "name": "John Doe", "email": "john@example.com" }
    patch:
      tags:
        - Edit
      summary: Edit an existing user
      requestBody:
        description: edit any number of settings for a given user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Edit"
            examples:
              name:
                value: { "name": "Jane Marry Doe" }
              email:
                value: { "email": "john.doe@example.com" }
              both:
                value:
                  { "name": "Jane Marry Doe", "email": "jane.doe@example.com" }
      responses:
        "202":
          description: Accpted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                { "id": 234, "name": "John Doe", "email": "john@example.com" }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example: { "error": "bad schema" }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example: { "error": "specified id does not exist" }
    delete:
      tags:
        - Edit
      summary: Remove an existing user
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example: { "error": "specified id does not exist" }
